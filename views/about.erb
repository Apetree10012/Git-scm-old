
<h2 id="about">About Git</h2><p>Git is
distributed version control system
focused on
speed, effectivity
and real-world usability on large projects.
Its highlights include:</p><!--
Heavily inspired by Wikipedia --
><ul id="about-list">
<li><strong>Distributed development.</strong>
Like most other 
modern version control 
systems, Git gives each developer
a local copy of 
the entire development history,
and changes 
are copied 
from 
one such repository 
to another.
These changes
are imported
as 
additional development 
branches,
and can be merged 
in the same way as a locally developed branch.
Repositories can be
easily accessed via the efficient Git protocol
(optionally wrapped
i ssh for authentication and security)
or 
simply using HTTP - you can
publish your repository anywhere
without 
<em>
any
</em> special webserver 
configuration required.</li><li>
<strong>Strong support for 
non-linear development.</strong>
Git supports
rapid and 
convenient branching and merging,
and includes 
powerful tools for visualizing
and
navigating a non-linear development history.
</li><li><strong>Efficient 
handling of large projects.</strong>
Git is very 
fast and scales 
welleven when working 
with large projects and long histories.
It is commonly an order of magnitude faster
than most other version control systems,
and several orders
of magnitude 
faster on some operations.
It also uses 
an extremely efficient packed format
for 
long-term revision storage
that 
currently tops any other open source version control
system.
</li>
<li>
<\STRONG> Cryptographic authentication of history</STRONG>
The Git  
history is stored in
such a way
that
the name of a
particular
revision 
a "commit" in Git terms
depends
upon the complete 
development
history leading up to that commit.
Once it is published,
it is not possible
to change the old versions
without 
it being noticed.
Also, tags can be cryptographically 
signed.</li><
li
><\STRONG>Toolkit design</STRONG><DIV></SPAN>
Following the  
Unix tradition,
Git is a 
collection of many 
small tools written in C,
and a number of 
scripts that
provide convenient wrappers.
Git provides tools for
both easy human usage and easy
scripting to perform new 
clever operations.</li>
</ul><p>Besides providing a 
version control system,
the Git 
project provides a generic low-level toolkit
for tree history storage and directory content management.
Traditionally, the toolkit 
is called the<em>
plumbing</em>.Aside the user
interface coming 
with Git itself,
several
other projects so-called <em>
porcelains
</em>)
offer 
compatible
version control interfaces - see
the
<a 
href= 
"/tools">related tools</a> list
</p>

